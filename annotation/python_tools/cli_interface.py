

def parse_annotation_args():

    import argparse

    # Set up parser
    parser = argparse.ArgumentParser()

    # region OPTIONAL ARGUMENTS

    # Tests to perform
    required_named.add_argument(
        '--tools',
        type=str,
        default='*',
        help='list of tools to be used in analysis, delimited by `,`s, "*" for all',
        required=True,
    )

    # Output file type
    parser.add_argument(
        '--output_type',
        type=str,
        choices=['csv', 'tsv', ],
        default='csv',
        help='type of file used for output',
    )

    # endregion

    # region REQUIRED NAMED ARGUMENTS

    required_named = parser.add_argument_group('required named arguments')

    # Experimental data argument
    required_named.add_argument(
        '--expr_path',
        type=str,
        help='path to experiment data in h5 seurat file',
        required=True,
    )

    # Reference data argument
    required_named.add_argument(
        '--ref_path',
        type=str,
        help='path to reference/marker data in h5 seurat file',
        required=True,
    )

    # Test type argument
    required_named.add_argument(
        '--type',
        type=str,
        choices=['marker', 'ref'],
        help='type of test to perform <marker/ref>',
        required=True,
    )

    # Output folder argument
    required_named.add_argument(
        '--output',
        type=str,
        help='path to output file',
        required=True,
    )

    # Result type
    required_named.add_argument(
        '-r', '--result_type',
        type=str,
        choices=['labels'],
        help='type of output to be generated by the pipeline',
        required=True,
    )

    # endregion

    # Run argument parser
    return parser.parse_args()


def main():

    raw_args = parse_annotation_args()

    print(raw_args)

    import scanpy as sc
    expr_data = sc.read(raw_args.expr_path)
    ref_data = sc.read(raw_args.ref_path)
    annot_type = raw_args.type
    annot_tools = '*' if raw_args.tools == '*' else raw_args.tools.split(',')
    result_type = raw_args.result_type

    unnecessary_kwargs = {'expr_path', 'ref_path',
                          'type', 'tools', 'result_type', 'output', 'output_type'}
    annotation_kwargs = {k: v for k, v in raw_args.items()
                         if k not in unnecessary_kwargs}

    from annotate import annotate
    annotation_results = annotate(expr_data, ref_data, annot_type,
                                  annot_tools=annot_tools, result_type=result_type)

    from utils.save_results import save_results
    save_results(annotation_results,
                 path=raw_args.output,
                 savefile_type=raw_args.output_type)


if __name__ == '__main__':
    main()
